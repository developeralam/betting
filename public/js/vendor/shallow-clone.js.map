{"version":3,"sources":["webpack:///./node_modules/shallow-clone/index.js"],"names":["valueOf","Symbol","prototype","typeOf","module","exports","val","deep","slice","Object","assign","constructor","Number","Map","Set","len","length","buf","Buffer","allocUnsafe","from","copy","cloneBuffer","call","cloneSymbol","res","byteLength","Uint8Array","set","cloneArrayBuffer","buffer","byteOffset","cloneTypedArray","flags","exec","re","source","lastIndex","cloneRegExp","create"],"mappings":";2GASA,MAAMA,EAAUC,OAAOC,UAAUF,QAC3BG,EAAS,EAAQ,OAwEvBC,EAAOC,QAtEP,SAAeC,EAAKC,GAClB,OAAQJ,EAAOG,IACb,IAAK,QACH,OAAOA,EAAIE,QACb,IAAK,SACH,OAAOC,OAAOC,OAAO,GAAIJ,GAC3B,IAAK,OACH,OAAO,IAAIA,EAAIK,YAAYC,OAAON,IACpC,IAAK,MACH,OAAO,IAAIO,IAAIP,GACjB,IAAK,MACH,OAAO,IAAIQ,IAAIR,GACjB,IAAK,SACH,OA0CN,SAAqBA,GACnB,MAAMS,EAAMT,EAAIU,OACVC,EAAMC,EAAOC,YAAcD,EAAOC,YAAYJ,GAAOG,EAAOE,KAAKL,GAEvE,OADAT,EAAIe,KAAKJ,GACFA,EA9CIK,CAAYhB,GACrB,IAAK,SACH,OA+CN,SAAqBA,GACnB,OAAON,EAAUS,OAAOT,EAAQuB,KAAKjB,IAAQ,GAhDlCkB,CAAYlB,GACrB,IAAK,cACH,OA4BN,SAA0BA,GACxB,MAAMmB,EAAM,IAAInB,EAAIK,YAAYL,EAAIoB,YAEpC,OADA,IAAIC,WAAWF,GAAKG,IAAI,IAAID,WAAWrB,IAChCmB,EA/BII,CAAiBvB,GAC1B,IAAK,eACL,IAAK,eACL,IAAK,aACL,IAAK,aACL,IAAK,YACL,IAAK,cACL,IAAK,cACL,IAAK,oBACL,IAAK,aACH,OAwBN,SAAyBA,EAAKC,GAC5B,OAAO,IAAID,EAAIK,YAAYL,EAAIwB,OAAQxB,EAAIyB,WAAYzB,EAAIU,QAzBhDgB,CAAgB1B,GACzB,IAAK,SACH,OASN,SAAqBA,GACnB,MAAM2B,OAAsB,IAAd3B,EAAI2B,MAAmB3B,EAAI2B,MAAS,OAAOC,KAAK5B,SAAQ,EAChE6B,EAAK,IAAI7B,EAAIK,YAAYL,EAAI8B,OAAQH,GAE3C,OADAE,EAAGE,UAAY/B,EAAI+B,UACZF,EAbIG,CAAYhC,GACrB,IAAK,QACH,OAAOG,OAAO8B,OAAOjC,GACvB,QACE,OAAOA","file":"js/vendor/shallow-clone.js","sourcesContent":["/*!\n * shallow-clone <https://github.com/jonschlinkert/shallow-clone>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst valueOf = Symbol.prototype.valueOf;\nconst typeOf = require('kind-of');\n\nfunction clone(val, deep) {\n  switch (typeOf(val)) {\n    case 'array':\n      return val.slice();\n    case 'object':\n      return Object.assign({}, val);\n    case 'date':\n      return new val.constructor(Number(val));\n    case 'map':\n      return new Map(val);\n    case 'set':\n      return new Set(val);\n    case 'buffer':\n      return cloneBuffer(val);\n    case 'symbol':\n      return cloneSymbol(val);\n    case 'arraybuffer':\n      return cloneArrayBuffer(val);\n    case 'float32array':\n    case 'float64array':\n    case 'int16array':\n    case 'int32array':\n    case 'int8array':\n    case 'uint16array':\n    case 'uint32array':\n    case 'uint8clampedarray':\n    case 'uint8array':\n      return cloneTypedArray(val);\n    case 'regexp':\n      return cloneRegExp(val);\n    case 'error':\n      return Object.create(val);\n    default: {\n      return val;\n    }\n  }\n}\n\nfunction cloneRegExp(val) {\n  const flags = val.flags !== void 0 ? val.flags : (/\\w+$/.exec(val) || void 0);\n  const re = new val.constructor(val.source, flags);\n  re.lastIndex = val.lastIndex;\n  return re;\n}\n\nfunction cloneArrayBuffer(val) {\n  const res = new val.constructor(val.byteLength);\n  new Uint8Array(res).set(new Uint8Array(val));\n  return res;\n}\n\nfunction cloneTypedArray(val, deep) {\n  return new val.constructor(val.buffer, val.byteOffset, val.length);\n}\n\nfunction cloneBuffer(val) {\n  const len = val.length;\n  const buf = Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : Buffer.from(len);\n  val.copy(buf);\n  return buf;\n}\n\nfunction cloneSymbol(val) {\n  return valueOf ? Object(valueOf.call(val)) : {};\n}\n\n/**\n * Expose `clone`\n */\n\nmodule.exports = clone;\n"],"sourceRoot":""}