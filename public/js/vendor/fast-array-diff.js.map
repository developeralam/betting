{"version":3,"sources":["webpack:///./node_modules/fast-array-diff/esm/diff/lcs.js","webpack:///./node_modules/fast-array-diff/esm/diff/same.js"],"names":["Direct","getSolution","a","aStart","aEnd","b","bStart","bEnd","d","startDirect","endDirect","compareFunc","elementsChanged","_a","_b","_c","_d","M","N","HALF","Math","floor","now","k","Infinity","segments","direct","none","preview","y","_loop_1","x","currentPoints","horizontal","vertical","push","diagonal","bestValue","reduce","best","info","forEach","now2","preview2","_loop_2","dSum","length","MAX","v","1","lcs","all","ia","ib","ret","type","oldArr","oldStart","oldEnd","i"],"mappings":"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","file":"js/vendor/fast-array-diff.js","sourcesContent":["function lcs(a, b, compareFunc) {\n    var M = a.length, N = b.length;\n    var MAX = M + N;\n    var v = { 1: 0 };\n    for (var d = 0; d <= MAX; ++d) {\n        for (var k = -d; k <= d; k += 2) {\n            var x = void 0;\n            if (k === -d || (k !== d && v[k - 1] + 1 < v[k + 1])) {\n                x = v[k + 1];\n            }\n            else {\n                x = v[k - 1] + 1;\n            }\n            var y = x - k;\n            while (x < M && y < N && compareFunc(a[x], b[y])) {\n                x++;\n                y++;\n            }\n            if (x === M && y === N) {\n                return d;\n            }\n            v[k] = x;\n        }\n    }\n    /* istanbul ignore next */\n    return -1; // never reach\n}\nvar Direct;\n(function (Direct) {\n    Direct[Direct[\"none\"] = 0] = \"none\";\n    Direct[Direct[\"horizontal\"] = 1] = \"horizontal\";\n    Direct[Direct[\"vertical\"] = 2] = \"vertical\";\n    Direct[Direct[\"diagonal\"] = 4] = \"diagonal\";\n    Direct[Direct[\"all\"] = 7] = \"all\";\n})(Direct || (Direct = {}));\nfunction getSolution(a, aStart, aEnd, b, bStart, bEnd, d, startDirect, endDirect, compareFunc, elementsChanged) {\n    var _a, _b, _c, _d;\n    if (d === 0) {\n        elementsChanged('same', a, aStart, aEnd, b, bStart, bEnd);\n        return;\n    }\n    else if (d === aEnd - aStart + (bEnd - bStart)) {\n        var removeFirst = (startDirect & Direct.horizontal ? 1 : 0) + (endDirect & Direct.vertical ? 1 : 0);\n        var addFirst = (startDirect & Direct.vertical ? 1 : 0) + (endDirect & Direct.horizontal ? 1 : 0);\n        if (removeFirst >= addFirst) {\n            aStart !== aEnd && elementsChanged('remove', a, aStart, aEnd, b, bStart, bStart);\n            bStart !== bEnd && elementsChanged('add', a, aEnd, aEnd, b, bStart, bEnd);\n        }\n        else {\n            bStart !== bEnd && elementsChanged('add', a, aStart, aStart, b, bStart, bEnd);\n            aStart !== aEnd && elementsChanged('remove', a, aStart, aEnd, b, bEnd, bEnd);\n        }\n        return;\n    }\n    var M = aEnd - aStart;\n    var N = bEnd - bStart;\n    var HALF = Math.floor(N / 2);\n    var now = {};\n    for (var k = -d - 1; k <= d + 1; ++k) {\n        now[k] = { d: Infinity, segments: 0, direct: Direct.none };\n    }\n    var preview = (_a = {},\n        _a[-d - 1] = { d: Infinity, segments: 0, direct: Direct.none },\n        _a[d + 1] = { d: Infinity, segments: 0, direct: Direct.none },\n        _a);\n    for (var y = 0; y <= HALF; ++y) {\n        _b = [preview, now], now = _b[0], preview = _b[1];\n        var _loop_1 = function (k) {\n            var x = y + k;\n            if (y === 0 && x === 0) {\n                now[k] = {\n                    d: 0,\n                    segments: 0,\n                    direct: startDirect,\n                };\n                return \"continue\";\n            }\n            var currentPoints = [\n                {\n                    direct: Direct.horizontal,\n                    d: now[k - 1].d + 1,\n                    segments: now[k - 1].segments + (now[k - 1].direct & Direct.horizontal ? 0 : 1),\n                },\n                {\n                    direct: Direct.vertical,\n                    d: preview[k + 1].d + 1,\n                    segments: preview[k + 1].segments + (preview[k + 1].direct & Direct.vertical ? 0 : 1),\n                },\n            ];\n            if (x > 0 && x <= M && y > 0 && y <= N && compareFunc(a[aStart + x - 1], b[bStart + y - 1])) {\n                currentPoints.push({\n                    direct: Direct.diagonal,\n                    d: preview[k].d,\n                    segments: preview[k].segments + (preview[k].direct & Direct.diagonal ? 0 : 1),\n                });\n            }\n            var bestValue = currentPoints.reduce(function (best, info) {\n                if (best.d > info.d) {\n                    return info;\n                }\n                else if (best.d === info.d && best.segments > info.segments) {\n                    return info;\n                }\n                return best;\n            });\n            currentPoints.forEach(function (info) {\n                if (bestValue.d === info.d && bestValue.segments === info.segments) {\n                    bestValue.direct |= info.direct;\n                }\n            });\n            now[k] = bestValue;\n        };\n        for (var k = -d; k <= d; ++k) {\n            _loop_1(k);\n        }\n    }\n    var now2 = {};\n    for (var k = -d - 1; k <= d + 1; ++k) {\n        now2[k] = { d: Infinity, segments: 0, direct: Direct.none };\n    }\n    var preview2 = (_c = {},\n        _c[-d - 1] = { d: Infinity, segments: 0, direct: Direct.none },\n        _c[d + 1] = { d: Infinity, segments: 0, direct: Direct.none },\n        _c);\n    for (var y = N; y >= HALF; --y) {\n        _d = [preview2, now2], now2 = _d[0], preview2 = _d[1];\n        var _loop_2 = function (k) {\n            var x = y + k;\n            if (y === N && x === M) {\n                now2[k] = {\n                    d: 0,\n                    segments: 0,\n                    direct: endDirect,\n                };\n                return \"continue\";\n            }\n            var currentPoints = [\n                {\n                    direct: Direct.horizontal,\n                    d: now2[k + 1].d + 1,\n                    segments: now2[k + 1].segments + (now2[k + 1].direct & Direct.horizontal ? 0 : 1),\n                },\n                {\n                    direct: Direct.vertical,\n                    d: preview2[k - 1].d + 1,\n                    segments: preview2[k - 1].segments + (preview2[k - 1].direct & Direct.vertical ? 0 : 1),\n                },\n            ];\n            if (x >= 0 && x < M && y >= 0 && y < N && compareFunc(a[aStart + x], b[bStart + y])) {\n                currentPoints.push({\n                    direct: Direct.diagonal,\n                    d: preview2[k].d,\n                    segments: preview2[k].segments + (preview2[k].direct & Direct.diagonal ? 0 : 1),\n                });\n            }\n            var bestValue = currentPoints.reduce(function (best, info) {\n                if (best.d > info.d) {\n                    return info;\n                }\n                else if (best.d === info.d && best.segments > info.segments) {\n                    return info;\n                }\n                return best;\n            });\n            currentPoints.forEach(function (info) {\n                if (bestValue.d === info.d && bestValue.segments === info.segments) {\n                    bestValue.direct |= info.direct;\n                }\n            });\n            now2[k] = bestValue;\n        };\n        for (var k = d; k >= -d; --k) {\n            _loop_2(k);\n        }\n    }\n    var best = {\n        k: -1,\n        d: Infinity,\n        segments: 0,\n        direct: Direct.none,\n    };\n    for (var k = -d; k <= d; ++k) {\n        var dSum = now[k].d + now2[k].d;\n        if (dSum < best.d) {\n            best.k = k;\n            best.d = dSum;\n            best.segments =\n                now[k].segments + now2[k].segments + (now[k].segments & now2[k].segments ? 0 : 1);\n            best.direct = now2[k].direct;\n        }\n        else if (dSum === best.d) {\n            var segments = now[k].segments + now2[k].segments + (now[k].segments & now2[k].segments ? 0 : 1);\n            if (segments < best.segments) {\n                best.k = k;\n                best.d = dSum;\n                best.segments = segments;\n                best.direct = now2[k].direct;\n            }\n            else if (segments === best.segments &&\n                !(best.direct & Direct.diagonal) &&\n                now2[k].direct & Direct.diagonal) {\n                best.k = k;\n                best.d = dSum;\n                best.segments = segments;\n                best.direct = now2[k].direct;\n            }\n        }\n    }\n    if (HALF + best.k === 0 && HALF === 0) {\n        HALF++;\n        now[best.k].direct = now2[best.k].direct;\n        now2[best.k].direct = preview2[best.k].direct;\n    }\n    getSolution(a, aStart, aStart + HALF + best.k, b, bStart, bStart + HALF, now[best.k].d, startDirect, now2[best.k].direct, compareFunc, elementsChanged);\n    getSolution(a, aStart + HALF + best.k, aEnd, b, bStart + HALF, bEnd, now2[best.k].d, now[best.k].direct, endDirect, compareFunc, elementsChanged);\n}\nexport default function bestSubSequence(a, b, compareFunc, elementsChanged) {\n    var d = lcs(a, b, compareFunc);\n    getSolution(a, 0, a.length, b, 0, b.length, d, Direct.diagonal, Direct.all, compareFunc, elementsChanged);\n}\n","import bestSubSequence from './lcs';\nexport default function (a, b, compareFunc) {\n    if (compareFunc === void 0) { compareFunc = function (ia, ib) { return ia === ib; }; }\n    var ret = [];\n    bestSubSequence(a, b, compareFunc, function (type, oldArr, oldStart, oldEnd) {\n        if (type === 'same') {\n            for (var i = oldStart; i < oldEnd; ++i) {\n                ret.push(oldArr[i]);\n            }\n        }\n    });\n    return ret;\n}\n"],"sourceRoot":""}