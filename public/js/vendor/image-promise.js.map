{"version":3,"sources":["webpack:///./node_modules/image-promise/index.js"],"names":["loadSingleImage","image","promise","Promise","resolve","reject","fulfill","naturalWidth","removeEventListener","complete","addEventListener","Object","assign","loadImages","input","attributes","HTMLImageElement","src","image_1","Image","keys","forEach","name","setAttribute","undefined","length","isArrayLike","reflected","map","call","img","catch","error","all","then","results","loaded","filter","x","errored","TypeError"],"mappings":"qFAGA,SAASA,EAAgBC,GACrB,IAAIC,EAAU,IAAIC,SAAQ,SAAUC,EAASC,GAazC,SAASC,IACDL,EAAMM,aACNH,EAAQH,GAGRI,EAAOJ,GAEXA,EAAMO,oBAAoB,OAAQF,GAClCL,EAAMO,oBAAoB,QAASF,GApBnCL,EAAMM,aAENH,EAAQH,GAEHA,EAAMQ,SAEXJ,EAAOJ,IAGPA,EAAMS,iBAAiB,OAAQJ,GAC/BL,EAAMS,iBAAiB,QAASJ,OAaxC,OAAOK,OAAOC,OAAOV,EAAS,CAAED,MAAOA,I,iBAmC3C,QAjCA,SAASY,EAAWC,EAAOC,GAEvB,QADmB,IAAfA,IAAyBA,EAAa,IACtCD,aAAiBE,iBACjB,OAAOhB,EAAgBc,GAE3B,GAAqB,iBAAVA,EAAoB,CAE3B,IAAIG,EAAMH,EACNI,EAAU,IAAIC,MAGlB,OAFAR,OAAOS,KAAKL,GAAYM,SAAQ,SAAUC,GAAQ,OAAOJ,EAAQK,aAAaD,EAAMP,EAAWO,OAC/FJ,EAAQD,IAAMA,EACPjB,EAAgBkB,GAE3B,GA3CJ,SAAqBJ,GACjB,YAAwBU,IAAjBV,EAAMW,OA0CTC,CAAYZ,GAAQ,CAEpB,IACIa,EAAY,GAAGC,IAAIC,KAAKf,GADd,SAAUgB,GAAO,OAAOjB,EAAWiB,EAAKf,GAAYgB,OAAM,SAAUC,GAAS,OAAOA,QAalG,OAXc7B,QAAQ8B,IAAIN,GAAWO,MAAK,SAAUC,GAChD,IAAIC,EAASD,EAAQE,QAAO,SAAUC,GAAK,OAAOA,EAAE/B,gBACpD,OAAI6B,EAAOX,SAAWU,EAAQV,OACnBW,EAEJjC,QAAQE,OAAO,CAClB+B,OAAQA,EACRG,QAASJ,EAAQE,QAAO,SAAUC,GAAK,OAAQA,EAAE/B,qBAO7D,OADYJ,QAAQE,OAAO,IAAImC,UAAU","file":"js/vendor/image-promise.js","sourcesContent":["function isArrayLike(input) {\n    return input.length !== undefined;\n}\nfunction loadSingleImage(image) {\n    var promise = new Promise(function (resolve, reject) {\n        if (image.naturalWidth) {\n            // If the browser can determine the naturalWidth the image is already loaded successfully\n            resolve(image);\n        }\n        else if (image.complete) {\n            // If the image is complete but the naturalWidth is 0px it is probably broken\n            reject(image);\n        }\n        else {\n            image.addEventListener('load', fulfill);\n            image.addEventListener('error', fulfill);\n        }\n        function fulfill() {\n            if (image.naturalWidth) {\n                resolve(image);\n            }\n            else {\n                reject(image);\n            }\n            image.removeEventListener('load', fulfill);\n            image.removeEventListener('error', fulfill);\n        }\n    });\n    return Object.assign(promise, { image: image });\n}\nfunction loadImages(input, attributes) {\n    if (attributes === void 0) { attributes = {}; }\n    if (input instanceof HTMLImageElement) {\n        return loadSingleImage(input);\n    }\n    if (typeof input === 'string') {\n        /* Create a <img> from a string */\n        var src = input;\n        var image_1 = new Image();\n        Object.keys(attributes).forEach(function (name) { return image_1.setAttribute(name, attributes[name]); });\n        image_1.src = src;\n        return loadSingleImage(image_1);\n    }\n    if (isArrayLike(input)) {\n        // Momentarily ignore errors\n        var reflect = function (img) { return loadImages(img, attributes).catch(function (error) { return error; }); };\n        var reflected = [].map.call(input, reflect);\n        var tsFix_1 = Promise.all(reflected).then(function (results) {\n            var loaded = results.filter(function (x) { return x.naturalWidth; });\n            if (loaded.length === results.length) {\n                return loaded;\n            }\n            return Promise.reject({\n                loaded: loaded,\n                errored: results.filter(function (x) { return !x.naturalWidth; })\n            });\n        });\n        // Variables named `tsFix` are only here because TypeScript hates Promise-returning functions.\n        return tsFix_1;\n    }\n    var tsFix = Promise.reject(new TypeError('input is not an image, a URL string, or an array of them.'));\n    return tsFix;\n}\nexport default loadImages;\n"],"sourceRoot":""}